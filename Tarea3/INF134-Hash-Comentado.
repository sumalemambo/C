#define empty -1
#define MAX_SIZE 1000000
#define tableSize 13
#include <stdlib.h>

typedef struct{
    int codigo_producto;
    char nombre_producto[31];
    int precio;
}producto;

typedef struct{
    int codigo_producto;
    int cantidad_descuento;
    int monto_descuento;
}oferta;

typedef struct{
    producto* table;
    int prime;
    int maxSize;
    int size;
}hashP;

typedef struct{
    oferta* table;
    int prime;
    int maxSize;
    int size;
}hashO;

typedef struct{
    int* array;
    int top;
    int maxSize;
}stack;

typedef struct{
    int key;
    int rep;
    int value;
}dato;

typedef struct node{
    dato info;
    struct node* left;
    struct node* right;
}binNode;

typedef struct{
    binNode* root;
}binTree;

typedef struct{
    dato* array;
    int lenght;
}heap;

//Test de primalidad: solo verifico hasta el n/2 ya que cualquier numero mayor no podra dividir de manera entera a mi numero
// estoy chequeando hasta el data/2 ya que necesito encontrar el menor estricto a M.
//Hay un problema si el largo del struct producto es 1, en ese caso el minimo primo es 1, hay que ver eso.

int prime(int data){
    int i;
    for(i = 2; i < data/2 ; i++){
        if( data % i == 0 ){
            i = 0;
            break;
        }
    }
    return (i == 0)? 0 : 1;
}

/*****
* TipoFunción: int ;NombreFunción: prime
******
* Resumen Función
* Verifica si data es un numero primo o no
******
* Input:
* tipoParámetra: int;NombreParámetro: data
******
* Returns:
* TipoRetorno: int;Descripción retorno: Retorna si es primo o no
*****/

int findPrime(int data){
    int i,max = 0;
    for(i = 1; i < data ;i++){
        if(prime(i) == 1){
            max = i;
        }
    }
    return max;
}

/*****
* TipoFunción: int ;NombreFunción: findPrime
******
* Resumen Función
* Busca el primer numero primo entre 1 y data
******
* Input:
* tipoParámetra: int;NombreParámetro: data
******
* Returns:
* TipoRetorno: int;Descripción retorno: Retorna el numero primo
*****/

int h1(int key,int lenght){
    return key % lenght;
}

/*****
* TipoFunción: int ;NombreFunción: h1
******
* Resumen Función
* Realiza el modulo entre la key y el tamaño del hash
******
* Input:
* tipoParámetra: int, int;NombreParámetro: key, Lenght
******
* Returns:
* TipoRetorno: int;Descripción retorno: Retorna un entero el cual sera la posicion en la tabla de hashing
*****/

int h2(int key,int lenght){
    return lenght - (key % lenght);
}

/*****
* TipoFunción: int ;NombreFunción: h2
******
* Resumen Función
* Realiza la resta entre el tamaño de la tabla hashing restandole la key en el modulo del tamaño
******
* Input:
* tipoParámetra: int, int;NombreParámetro: key, Lenght
******
* Returns:
* TipoRetorno: int;Descripción retorno: Retorna un entero el cual sera la posicion en la tabla de hashing usando doble hashing
*****/

//Hash struct producto
void initHash(hashP* HT){
    HT->maxSize = tableSize;
    HT->size = 0;
    HT->prime = 11;
    HT->table = (producto*)malloc(sizeof(producto)*tableSize);
    for(int i = tableSize;i--;){
        HT->table[i].codigo_producto = empty;
    }
}

/*****
* TipoFunción: void ;NombreFunción: initHash
******
* Resumen Función
* Inicializa la tabla de hashing de los productos
******
* Input:
* tipoParámetra: hashP ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea la tabla de hashing en la variable HT donde se inicializa cada celda con un -1
*****/

int hashInsert(hashP* HT,producto data){
    int pos,h1_t,h2_t;
    pos = h1_t = h1(data.codigo_producto,HT->maxSize);
    h2_t = h2(data.codigo_producto,HT->prime);
    for(int i = 1; HT->table[pos].codigo_producto != empty && HT->table[pos].codigo_producto != data.codigo_producto;i++){
        pos = (h1_t + i * h2_t) % HT->maxSize;
    }
    if(HT->table[pos].codigo_producto == data.codigo_producto){
        return 0;
    }
    HT->table[pos] = data;
    HT->size++;
    return 1;
}

/*****
* TipoFunción: int ;NombreFunción: hashInsert
******
* Resumen Función
* Primero se definen variables para poder insertar en la tabla, luego se comienza un for donde se ira viendo
*con doble hashing si la posición donde se quiere insertar esta vacia, y sí lo está, posicionarlo ahí.
******
* Input:
* tipoParámetra: hashP, producto ;NombreParámetro: *HT, data
******
* Returns:
* TipoRetorno: int ;Descripción retorno: Retorna si se pudo o no insertar en la tabla
*****/

void rehash(hashP* HT){
    int lenght = HT->maxSize;
    HT->maxSize = findPrime(HT->maxSize*2);
    HT->prime = findPrime(HT->maxSize);
    producto* aux2 = HT->table;
    HT->table = (producto*)malloc(sizeof(producto)*HT->maxSize);
    HT->size = 0;
    for(int i = HT->maxSize;i--;){
        HT->table[i].codigo_producto = empty;
    }
    for(int i = lenght;i--;){
        if(aux2[i].codigo_producto != empty){
            hashInsert(HT,aux2[i]);
        }
    }
    free((void*)aux2);
}

/*****
* TipoFunción: void ;NombreFunción: rehash
******
* Resumen Función
*Primero se guarda el tamaño de la tabla actual, luego se busca un nuevo tamaño pero multiplicado por 2, lo mismo para prime,
*donde me ira diciendo la posición, luego se pide el memoria para la nueva tabla de hashing, se inicializa la nueva tabla,
*para finalmente volver a insertar los valores de la antigua tabla en la nueva.
******
* Input:
* tipoParámetra: hashP ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea una nueva tabla de hashing más grande a la anterior.
*****/

producto* hashSearch(hashP* HT,int key){
    int pos,h1_t,h2_t;
    pos = h1_t = h1(key,HT->maxSize);
    h2_t = h2(key,HT->prime);
    for(int i = 1; HT->table[pos].codigo_producto != empty && HT->table[pos].codigo_producto != key;i++){
        pos = (h1_t + i * h2_t) % HT->maxSize;
    }
    if(HT->table[pos].codigo_producto == key){
        return &(HT->table[pos]);
    }
    return NULL;
}

/*****
* TipoFunción: producto* ;NombreFunción: hashSearch
******
* Resumen Función
*Busca el contenido en la tabla de hashing pasandole la key, de la misma manera en como se insertaron.
******
* Input:
* tipoParámetra: hashP, int ;NombreParámetro: *HT, key
******
* Returns:
* TipoRetorno: producto* ;Descripción retorno: Retorna el contenido que tenia la key.
*****/

void clearHashp(hashP* HT){
    free((void*)HT->table);
}

/*****
* TipoFunción: void ;NombreFunción: clearHashp
******
* Resumen Función
*Libera la memoria de la tabla que le entregan
******
* Input:
* tipoParámetra: hashP ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Devuelve la memoria utilizada en la tabla
*****/

//Hash struct oferta
void initHashO(hashO* HT){

    HT->maxSize = tableSize;
    HT->size = 0;
    HT->prime = 11;
    HT->table = (oferta*)malloc(sizeof(oferta)*tableSize);
    for(int i = tableSize;i--;){
        HT->table[i].codigo_producto = empty;
    }
}

/*****
* TipoFunción: void ;NombreFunción: initHashO
******
* Resumen Función
* Inicializa la tabla de hashing de las ofertas.
******
* Input:
* tipoParámetra: hashO ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea la tabla de hashing en la variable HT donde se inicializa cada celda con un -1
*****/

int hashInsertO(hashO* HT,oferta data){
    int pos,h1_t,h2_t;
    pos = h1_t = h1(data.codigo_producto,HT->maxSize);
    h2_t = h2(data.cantidad_descuento,HT->prime);
    for(int i = 1; HT->table[pos].codigo_producto != empty && HT->table[pos].codigo_producto != data.codigo_producto;i++){
        pos = (h1_t + i * h2_t) % HT->maxSize;
    }
    if(HT->table[pos].codigo_producto == data.cantidad_descuento){
        return 0;
    }
    HT->table[pos] = data;
    HT->size++;
    return 1;
}

/*****
* TipoFunción: int ;NombreFunción: hashInsertO
******
* Resumen Función
* Primero se definen variables para poder insertar en la tabla, luego se comienza un for donde se ira viendo
*con doble hashing si la posición donde se quiere insertar esta vacia, y sí lo está, posicionarlo ahí.
******
* Input:
* tipoParámetra: hashO, oferta ;NombreParámetro: *HT, data
******
* Returns:
* TipoRetorno: int ;Descripción retorno: Retorna si se pudo o no insertar en la tabla
*****/

oferta* hashSearchO(hashO* HT,int key){

    int pos, h1_t, h2_t;
    pos = h1_t = h1(key,HT->maxSize);
    h2_t = h2(key,HT->prime);
    for(int i = 1; HT->table[pos].codigo_producto != empty && HT->table[pos].codigo_producto != key;i++){
        pos = (h1_t + i * h2_t) % HT->maxSize;
    }
    if(HT->table[pos].codigo_producto == key){
        return &(HT->table[pos]);
    }
    return NULL;
}

/*****
* TipoFunción: oferta* ;NombreFunción: hashSearchO
******
* Resumen Función
*Busca el contenido en la tabla de hashing pasandole la key, de la misma manera en como se insertaron.
******
* Input:
* tipoParámetra: hashO, int ;NombreParámetro: *HT, key
******
* Returns:
* TipoRetorno: oferta* ;Descripción retorno: Retorna el contenido que tenia la key.
*****/

void rehash2(hashO* HT){
    int lenght = HT->maxSize;
    HT->maxSize = findPrime(HT->maxSize * 2);
    HT->prime = findPrime(HT->maxSize);
    oferta* aux = HT->table;
    HT->table = (oferta*)malloc(sizeof(oferta)*HT->maxSize);
    HT->size = 0;
    for(int i = lenght;i--;){
        if(aux[i].codigo_producto != empty){
            hashInsertO(HT,aux[i]);
        }
    }
    free((void*)aux);
}

/*****
* TipoFunción: void ;NombreFunción: rehash2
******
* Resumen Función
*Primero se guarda el tamaño de la tabla actual, luego se busca un nuevo tamaño pero multiplicado por 2, lo mismo para prime,
*donde me ira diciendo la posición, luego se pide el memoria para la nueva tabla de hashing, se inicializa la nueva tabla,
*para finalmente volver a insertar los valores de la antigua tabla en la nueva.
******
* Input:
* tipoParámetra: hashO ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea una nueva tabla de hashing más grande a la anterior.
*****/

void clearHasho(hashO* HT){
    free((void*)HT->table);
}

/*****
* TipoFunción: void ;NombreFunción: clearHasho
******
* Resumen Función
*Libera la memoria de la tabla que le entregan
******
* Input:
* tipoParámetra: hashO ;NombreParámetro: *HT
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Devuelve la memoria utilizada en la tabla
*****/

//Heap
void Heapify(heap* H,int pos){
    int left,right,aux = pos;
    dato aux1 = H->array[pos];
    left = 2 * pos;
    right = 2 * pos + 1;
    if(left <= H->lenght && H->array[pos].value < H->array[left].value){
        aux = left;
    }
    if(right <= H->lenght && H->array[aux].value < H->array[right].value){
        aux = right;
    }
    if(aux != pos){
        H->array[pos] = H->array[aux]; 
        H->array[aux] = aux1;
        Heapify(H,aux);
    }
}

/*****
* TipoFunción: void ;NombreFunción: Heapify
******
* Resumen Función
*Itera por todas las casillas del arreglo para transformarlo en un heap
******
* Input:
* tipoParámetra: heap, int ;NombreParámetro: *H, pos
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Iterar casillas
*****/

void maxHeapify(heap* H){
    for(int i = 1 ; i <= H->lenght ; i++){
        Heapify(H,i);
    }
}

/*****
* TipoFunción: void ;NombreFunción: maxHeapify
******
* Resumen Función
*Llama a la función Heapify iterandolo por todas las casillas del arreglo.
******
* Input:
* tipoParámetra: heap;NombreParámetro: *H
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea un Heap
*****/

dato deleteMax(heap* H){
    dato aux = H->array[1];
    H->array[1] = H->array[H->lenght];
    Heapify(H,1);
    H->lenght--;
    return aux;
}

/*****
* TipoFunción: dato ;NombreFunción: deleteMax
******
* Resumen Función
*Borra el elemento mayor en el heap
******
* Input:
* tipoParámetra: heap;NombreParámetro: *H
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Actualiza el heap, borrando su elemento mayor
*****/

void buildHeap(heap* H,dato* array,int lenght){
    H->array = array;
    H->lenght = lenght;
}

/*****
* TipoFunción: void ;NombreFunción: buildHeap
******
* Resumen Función
*Inicializa el heap
******
* Input:
* tipoParámetra: heap, dato, int;NombreParámetro: *H, *array, lenght
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Crea un heap
*****/

void deleteHeap(heap* H){
    free((void*)H->array);
}

/*****
* TipoFunción: void ;NombreFunción: deleteHeap
******
* Resumen Función
*Libera la memoria que se uso en el heap
******
* Input:
* tipoParámetra: heap;NombreParámetro: *H
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Libera la memoria del heap
*****/

// stack
void initStack(stack* S){
    S->array = (int*)malloc(sizeof(int)*MAX_SIZE);
    S->maxSize = MAX_SIZE;
    S->top = -1;
}

/*****
* TipoFunción: void ;NombreFunción: initStack
******
* Resumen Función
*Inicializa un stack pidiendo memoria con el tamaño requerido
******
* Input:
* tipoParámetra: stack ;NombreParámetro: *S
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Pide la memoria para un stack
*****/

void destroyStack(stack* S){
    free((void*)S->array);
}

/*****
* TipoFunción: void ;NombreFunción: destroyStack
******
* Resumen Función
*Libera la memoria del stack que le pases
******
* Input:
* tipoParámetra: stack ;NombreParámetro: *S
******
* Returns:
* TipoRetorno:  ;Descripción retorno: Libera la memoria de un stack
*****/

void push(stack* S,int key){
    if(S->top == S->maxSize){
        return;
    }
    S->array[++S->top] = key;
}

/*****
* TipoFunción: void ;NombreFunción: push
******
* Resumen Función
*Inserta un elemento en el stack
******
* Input:
* tipoParámetra: stack, int ;NombreParámetro: *S, key
******
* Returns:
* TipoRetorno:  ;Descripción retorno: actualiza el stack con un nuevo elemento
*****/

void clear(stack* S){
    S->top = -1;
}

/*****
* TipoFunción: void ;NombreFunción: clear
******
* Resumen Función
*Coloca el top en -1
******
* Input:
* tipoParámetra: stack ;NombreParámetro: *S
******
* Returns:
* TipoRetorno:  ;Descripción retorno: actualiza el stack con el top en -1
*****/

int topValue(stack* S){
    return S->array[S->top];
}

/*****
* TipoFunción: int ;NombreFunción: topValue
******
* Resumen Función
*Me dice el valor entero del top del stack que le pasemos
******
* Input:
* tipoParámetra: stack ;NombreParámetro: *S
******
* Returns:
* TipoRetorno: int ;Descripción retorno: Valor del top
*****/

int lenght(stack* S){
    return S->top+1;
}

/*****
* TipoFunción: int ;NombreFunción: lenght
******
* Resumen Función
*Me dice el tamaño del stac
******
* Input:
* tipoParámetra: stack ;NombreParámetro: *S
******
* Returns:
* TipoRetorno: int ;Descripción retorno: El tamaño del stack
*****/

//arbol
void initTree(binTree* T){
    T->root = NULL;
}

/*****
* TipoFunción: void ;NombreFunción: initTree
******
* Resumen Función
* Crea un arbol vacio
******
* Input:
* tipoParámetra: binTree;NombreParámetro: *T
******
* Returns:
* TipoRetorno: ;Descripción retorno: crea un arbol vacio
*****/

void clearHelp(binNode* nodo){
    if( nodo == NULL){
        return;
    }
    clearHelp(nodo->left);
    clearHelp(nodo->right);
    free((void*)nodo);
}

/*****
* TipoFunción: void;NombreFunción: clearHelp
******
* Resumen Función
* Limpia el nodo recibido y sus hijos
******
* Input:
* tipoParámetra: binNode;NombreParámetro: *nodo
******
* Returns:
* TipoRetorno: ;Descripción retorno: elimina el valor del nodo y sus hijos
*****/

void clearTree(binTree* T){
    clearHelp(T->root);
    T->root=NULL;
}

/*****
* TipoFunción: void;NombreFunción: clearTree
******
* Resumen Función
* Limpia el arbol 
******
* Input:
* tipoParámetra: binTree;NombreParámetro: *T
******
* Returns:
* TipoRetorno: ;Descripción retorno: elimina arbol, volviendolo null y de tamaño 0
*****/

binNode* insertHelp(binNode* nodo,dato buy,int* size){
    if(nodo == NULL){
        nodo=(binNode*)malloc(sizeof(binNode));
        nodo->info=buy;
        nodo->left=NULL;
        nodo->right=NULL;
        (*size)++;
    }
    else if(nodo->info.key > buy.key){
        nodo->left=insertHelp(nodo->left,buy,size);
    }
    else if(nodo->info.key == buy.key){
        nodo->info.rep += buy.rep;
        nodo->info.value += buy.value;
    }
    else{
        nodo->right=insertHelp(nodo->right,buy,size);
    }
    return nodo;
}

/*****
* TipoFunción: binNode ;NombreFunción: *insertHelp
******
* Resumen Función
* inserta nodo respecto al valor de la key, y la key ya se encuentra en el arbol
*se aumenta las repeticiones y el valor
******
* Input:
* tipoParámetra: binNode, dato, int;NombreParámetro: *nodo, buy, *size
******
* Returns:
* TipoRetorno: binNode ;Descripción retorno: Le entrega a la función insert el nodo que se inserto
*****/

void insert(binTree* T,dato buy,int* size){
    T->root=insertHelp(T->root,buy,size);
}

/*****
* TipoFunción: void ;NombreFunción: insert
******
* Resumen Función
* inserta un nodo en el arbol
******
* Input:
* tipoParámetra: binTree, dato, int;NombreParámetro: *T, buy, *size
******
* Returns:
* TipoRetorno: ;Descripción retorno: Actualiza el arbol con nuevo nodo
*****/

//
void treeToArrayHelp(dato* array,binNode* T,int* i){
    if(T != NULL){
        array[(*i)++] = T->info;
        treeToArrayHelp(array,T->left,i);
        treeToArrayHelp(array,T->right,i);
    }
}

/*****
* TipoFunción: void ;NombreFunción: treeToArrayHelp
******
* Resumen Función
* Se utiliza para ir transformando el arbol en arreglo
******
* Input:
* tipoParámetra: dato, binNode, int ;NombreParámetro: *array, *T, *i
******
* Returns:
* TipoRetorno: ;Descripción retorno: Retorna a treeToArray el arbol transformado en un arreglo
*****/

void treeToArray(dato* array,binTree* T){
    int i = 1;
    treeToArrayHelp(array,T->root,&i);
}

/*****
* TipoFunción: void ;NombreFunción: treeToArray
******
* Resumen Función
* LLama a la función treeToArrayHelp para transformar el arbol en un arreglo
******
* Input:
* tipoParámetra: dato, binTree;NombreParámetro: *array, *T
******
* Returns:
* TipoRetorno: ;Descripción retorno: Apartir del arbol lo transforma en un arreglo
*****/
